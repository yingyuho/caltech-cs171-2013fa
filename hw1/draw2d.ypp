%{
//#include <stdint.h>
#include <FlexLexer.h>
#include <string>
#include <list>
#include <cmath>
#include <iostream>
#include "matrix.h"

using namespace std;

int yyerror(const char *s);
int yylex();
typedef Matrix<double,2,1> Vec2;
typedef list<Vec2*> Polygon2;
typedef list<Polygon2*> Image2;
static Image2 *results;
%}

%union
{
    double fval;
    list< Matrix<double,2,1>* > *polyg_ptr;
    list< list< Matrix<double,2,1>* >*> *image_ptr;
}

%defines

%token <fval> FLOAT
%token POLYLTOK

%type <polyg_ptr> polygon
%type <image_ptr> image

%%

image:
    {
        results = $$ = new Image2;
    }
    |
    image POLYLTOK polygon
    {
        $1->push_back($3);
	$$ = $1;
    }
;

polygon:
    {
        $$ = new Polygon2;
    }
    |
    polygon FLOAT FLOAT
    {
        double pt[2] = {$2,$3};
	$1->push_back(new Vec2(pt));
	$$ = $1;
    }
;

%%

static FlexLexer *lexer;

int yyerror(const char * s)
{
   cerr << "Parse error: " << s << endl;
   return 0;
}

int yylex()
{
   return lexer->yylex();
}

Image2 *parse_image(istream &datafile)
{
   // Construct the lexer.
   lexer = new yyFlexLexer(&datafile);
   // Run the parser.
   if(yyparse())
   {
       cerr << "Parse failed!" << endl;
       exit(1);
   }

   delete lexer;
   return results;
}

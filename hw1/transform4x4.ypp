%{
//#include <stdint.h>
#include <FlexLexer.h>
#include <string>
#include <list>
#include <cmath>
#include "matrix.h"

using namespace std;

int yyerror(const char *s);
int yylex();
typedef Matrix<double,4,4> Matrix44;
typedef Matrix<double,3,1> Matrix31;
static list<Matrix44*> *results;
%}

%union
{
    double fval;
    Matrix<double,3,1>* vecptr;
    Matrix<double,4,4>* matptr;
    list< Matrix<double,4,4>* >* matlist;
}

%defines

%token <fval> FLOAT
%token TRANSTOK
%token ROTATTOK
%token SCALETOK

%type <matptr> matrix
%type <vecptr> vector
%type <matlist> matrices

%%

transform:
    matrices
    { results = $1; }
;

// a list of matrices
matrices:
    {   
        $$ = new list<Matrix44*>; 
    }
    | 
    matrices matrix
    { 
        $1->push_back($2);
        $$ = $1;
    }
;

matrix:
    // translation x y z
    TRANSTOK FLOAT FLOAT FLOAT
    {
        double array[16] = {\
         1, 0, 0,$2, \
         0, 1, 0,$3, \
         0, 0, 1,$4, \
         0, 0, 0, 1 };

        $$ = new Matrix44(array);
    }
    |
    // rotation x y z angle
    ROTATTOK vector FLOAT
    {
        double x = (*($2))[0];
        double y = (*($2))[1];
        double z = (*($2))[2];
        double s = sin($3);
        double c = cos($3);

        double array[16] = {\
        x*x*(1-c) +   c, x*y*(1-c) - z*s, x*z*(1-c) + y*s, 0, \
        y*x*(1-c) + z*s, y*y*(1-c) +   c, y*z*(1-c) - x*s, 0, \
        z*x*(1-c) - y*s, z*y*(1-c) + x*s, z*z*(1-c) +   c, 0, \
        0,0,0,1};

        $$ = new Matrix44(array);
    }
    |
    // scaleFactor sx sy sz
    SCALETOK FLOAT FLOAT FLOAT
    {
        double array[16] = {\
        $2, 0, 0, 0, \
         0,$3, 0, 0, \
         0, 0,$4, 0, \
         0, 0, 0, 1 };

        $$ = new Matrix44(array);
    }
;

// normalize a vector
vector:
    FLOAT FLOAT FLOAT
    {
            double vec[3] = {$1,$2,$3};
        $$ = new Matrix31(vec);
        *$$ = $$->normalize();
    }
;

%%

static FlexLexer *lexer;

int yyerror(const char * s)
{
   cerr << "Parse error: " << s << endl;
   return 0;
}

int yylex()
{
   return lexer->yylex();
}

list<Matrix44*> *parse_transform(istream &datafile)
{
   // Construct the lexer.
   lexer = new yyFlexLexer(&datafile);
   // Run the parser.
   if(yyparse())
   {
       cerr << "Parse failed!" << endl;
       exit(1);
   }

   delete lexer;
   return results;
}
